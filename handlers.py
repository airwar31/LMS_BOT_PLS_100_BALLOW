from aiogram import types
from keyboard_utils import get_main_keyboard
from announcement_handlers import process_announcement_command
from aiogram.dispatcher import FSMContext
from keyboard_utils import get_main_keyboard
from db_utils import register_user, get_user_profile

async def bot_info(message: types.Message):
    bot_info_text = (
        "ü§ñ *–û –±–æ—Ç–µ*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:\n"
        "üìÖ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π\n"
        "üìã –ü–æ–ª—É—á–∞—Ç—å –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è\n"
        "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —É—á–∞—â–∏—Ö—Å—è –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.\n"
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º @airwar31."
    )
    await message.answer(
        bot_info_text,
        parse_mode="Markdown",
        reply_markup=get_main_keyboard(message.from_user.id)
    )


async def process_profile(message: types.Message):
    user = get_user_profile(message.from_user.id)
    if not user:
        await message.reply("–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
        
    profile_text = f"""üë§ –ü—Ä–æ—Ñ–∏–ª—å —É—á–µ–Ω–∏–∫–∞:
–ò–º—è: {user['name']}
–§–∞–º–∏–ª–∏—è: {user['surname']}
–û—Ç—á–µ—Å—Ç–≤–æ: {user['patronymic']}
–ö–ª–∞—Å—Å: {user['class']}
–°–º–µ–Ω–∞: {user['shift']}
–¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}"""
    
    await message.reply(profile_text)

from registration_handlers import process_registration_step

async def process_name(message: types.Message, state: FSMContext):
    await process_registration_step(message, state, "name")

async def process_surname(message: types.Message, state: FSMContext):
    await process_registration_step(message, state, "surname")

async def process_patronymic(message: types.Message, state: FSMContext):
    await process_registration_step(message, state, "patronymic")

async def process_class(message: types.Message, state: FSMContext):
    await process_registration_step(message, state, "class")

async def process_shift(message: types.Message, state: FSMContext):
    await process_registration_step(message, state, "shift")

async def process_phone(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['phone'] = message.text
        user_data = {
            'name': data['name'],
            'surname': data['surname'],
            'patronymic': data['patronymic'],
            'class': data['class'],
            'shift': data['shift'],
            'phone': data['phone'],
            'username': message.from_user.username
        }
        register_user(message.from_user.id, user_data)
    
    await state.finish()
    await message.reply("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=get_main_keyboard(message.from_user.id))