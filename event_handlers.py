from aiogram import types
from event_db import save_event, get_current_events
from aiogram.dispatcher import FSMContext
from datetime import datetime
import sqlite3
import logging
from notifications import send_announcement
from event_states import EventStates
from event_keyboards import get_event_keyboard, get_admin_event_keyboard, get_cancel_keyboard
from config import DATABASE
from event_db import delete_event, get_event
conn = sqlite3.connect(DATABASE)

async def process_events_menu(message: types.Message):
    keyboard = get_event_keyboard()
    await message.answer("üéâ –ú–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=keyboard)

async def process_current_events(message: types.Message):
    try:
        events = get_current_events()
        if not events:
            await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ.")
            return
    except Exception as e:
        logging.error(f"Error getting current events: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    response = "üìã –¢–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è:\n\n"
    for event in events:
        start_date = datetime.strptime(event[3], '%Y-%m-%d').strftime('%d.%m.%Y')
        end_date = datetime.strptime(event[4], '%Y-%m-%d').strftime('%d.%m.%Y')
        response += f"üìÖ {event[1]}\n"
        response += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {event[2]}\n"
        response += f"üìç –ö–æ–≥–¥–∞: {start_date} - {end_date}\n"
        response += f"üïí –í—Ä–µ–º—è: {event[5]} - {event[6]}\n\n"
    
    await message.answer(response)

async def process_admin_events(message: types.Message):
    keyboard = get_admin_event_keyboard()
    await message.answer("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è–º–∏:", reply_markup=keyboard)

async def process_delete_event_request(message: types.Message):
    events = get_current_events()
    if not events:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    
    events_list = "\n".join([f"ID: {event[0]} - {event[1]}" for event in events])
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n{events_list}")
    await EventStates.waiting_for_event_id.set()

async def process_delete_event(message: types.Message, state: FSMContext):
    try:
        event_id = int(message.text)
        event = get_event(event_id)
        if not event:
            await message.answer("–°–æ–±—ã—Ç–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.finish()
            return
        
        delete_event(event_id)
        await message.answer(f"–°–æ–±—ã—Ç–∏–µ '{event[1]}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–æ–±—ã—Ç–∏—è.")
    finally:
        await state.finish()

async def process_create_event(message: types.Message):
    await EventStates.waiting_for_name.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=get_cancel_keyboard())

async def process_event_name(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ":
        await state.finish()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_event_keyboard())
        return
    async with state.proxy() as data:
        data['name'] = message.text
    await EventStates.waiting_for_description.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=get_cancel_keyboard())

async def process_event_description(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ":
        await state.finish()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_event_keyboard())
        return
    async with state.proxy() as data:
        data['description'] = message.text
    await EventStates.waiting_for_start_date.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=get_cancel_keyboard())

async def process_event_start_date(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ":
        await state.finish()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_event_keyboard())
        return
    is_valid, normalized_date = await validate_date(message.text)
    if not is_valid:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    
    async with state.proxy() as data:
        data['start_date'] = normalized_date
    await EventStates.waiting_for_end_date.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=get_cancel_keyboard())

async def process_event_end_date(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ":
        await state.finish()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_event_keyboard())
        return
    is_valid, normalized_date = await validate_date(message.text)
    if not is_valid:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    
    async with state.proxy() as data:
        data['end_date'] = normalized_date
    await EventStates.waiting_for_start_time.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):", reply_markup=get_cancel_keyboard())

async def process_event_start_time(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ":
        await state.finish()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_event_keyboard())
        return
    is_valid, normalized_time = await validate_time(message.text)
    if not is_valid:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú")
        return
    
    async with state.proxy() as data:
        data['start_time'] = normalized_time
    await EventStates.waiting_for_end_time.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú):", reply_markup=get_cancel_keyboard())

async def process_event_end_time(message: types.Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ":
        await state.finish()
        await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_event_keyboard())
        return
    is_valid, normalized_time = await validate_time(message.text)
    if not is_valid:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú")
        return
    
    async with state.proxy() as data:
        data['end_time'] = normalized_time
        try:
            start_dt = datetime.strptime(f"{data['start_date']} {data['start_time']}", '%Y-%m-%d %H:%M')
            end_dt = datetime.strptime(f"{data['end_date']} {normalized_time}", '%Y-%m-%d %H:%M')
            if end_dt <= start_dt:
                await message.answer("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è")
                return
        except ValueError:
            await message.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏")
            return
        save_event(
            data['name'],
            data['description'],
            data['start_date'],
            data['end_date'],
            data['start_time'],
            data['end_time']
        )
        
        notification_text = f"üéâ –ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!\n\n" \
                          f"üìå {data['name']}\n" \
                          f"üìù {data['description']}\n" \
                          f"üìÖ {data['start_date']} - {data['end_date']}\n" \
                          f"‚è∞ {data['start_time']} - {data['end_time']}"
        
        await send_announcement(message.bot, notification_text)
    
    await state.finish()
    await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
    await message.answer("üéâ –ú–µ–Ω—é –Ω–æ–≤–æ—Å—Ç–µ–π:", reply_markup=get_admin_event_keyboard())

async def validate_date(date_str: str) -> tuple[bool, str]:
    try:
        date_obj = datetime.strptime(date_str, '%d.%m.%Y')
        normalized_date = date_obj.strftime('%Y-%m-%d')
        return True, normalized_date
    except ValueError:
        return False, ''

async def validate_time(time_str: str) -> tuple[bool, str]:
    try:
        time_obj = datetime.strptime(time_str, '%H:%M')
        normalized_time = time_obj.strftime('%H:%M')
        return True, normalized_time
    except ValueError:
        return False, ''